transcedence = {12,30,686,858,886,1040,1294,4164,4190,1684}

for i, bot in pairs(getBots()) do
    if getBot().name:upper() == bot.name:upper() then
        indexbot = i
    end
end

setBool("Auto Reconnect",false)
setBool("Show Place Hand",false)
setBool("Show Punch Hand",false)
tilebreak = {}
tileDirt = {}
infoid = {}
worlds = {}
backups = {}
index = 1
strings = ""
str = ""
local tileBlock = 0
local tileSeed = 0
local tilePack = 0
local tileEvent = 0
local tileY = -1
local setting = {
    seed = 1,
    pack = 1,
    timechecker = os.time(),
    backup = 1,
    take = 1,
    world = 1
}
seedX = dropseedX - 1
seedY = dropseedY - 1
packX = droppackX - 1
packY = droppackY - 1
eventX = dropeventX - 1
eventY = dropeventY - 1
posX = customBreakX - 1
posY = customBreakY - 1
seed = block + 1


setting.tutorial = function()
    local str = ""
    addHook("onvariant","tutor",function(var)
        if var[0] == "OnDialogRequest" then
            if string.find(var[1],"myWorldsUiTab") then
                local idx = string.lower(string.match(var[1], 'add_button|(%w+)|'))
                str = str .. idx
            end
        end
    end)
    sendPacket("action|wrench\n|netid|"..getBot().netId,2)
    sleep(1000)
    sendPacket("action|dialog_return\ndialog_name|popup\nnetID|"..getBot().netId.."|\nbuttonClicked|my_worlds",2)
    sleep(1000)
    return str
end

setting.wordsrandom = function()
    local random = {
        "Cuma senyuman doang, udah bikin gemes.",
        "Bentar lagi uda jarang ni lu nongkrong di sini.",
        "Kita ngapain sih, ikut-ikutan heboh?",
        "Gue tuh selalu berusaha baik, tapi gimana ya.",
        "Gak usah diambil pusing, santai aja dulu.",
        "Jangan sok asik, tuh keliatan banget.",
        "Santai aja dulu, gak usah tegang.",
        "Jangan bawa drama-dramaan, capek.",
        "Gak usah dibawa serius, nanti malah stress.",
        "Gue tuh kalem, gak usah ribut.",
        "Lagi asik nongkrong, ada yang ngomongin.",
        "Buat apa pake jaim-jaim, santai aja.",
        "Lagi asik main game, tiba-tiba ada yang gangguin.",
        "Gak usah sok asik, keliatan banget.",
        "Nggak perlu pake baper, gak ada gunanya.",
        "Gue gak peduliin, tinggalin aja.",
        "Santai aja dulu, gak usah terlalu serius.",
        "Nggak usah diambil pusing, biar enak.",
        "Hati-hati, banyak orang munafik.",
        "Lagi pada heboh semua, bikin geger.",
        "Gak usah pake jaim-jaim, santai aja.",
        "Lagi dengerin lagu enak, bawaannya pengen joget.",
        "Nih, lagi pada rame-rame di tempat baru.",
        "Gue tuh kalem, gak perlu ribut.",
        "Udah capek-capek ngomong, gak dengerin juga.",
        "Asik banget nih, liburan seru.",
        "Gak usah sok asik, keliatan banget.",
        "Bentar lagi weekend, pasti seru banget nih.",
        "Cuma bisa doa aja, gimana lagi.",
        "Lagi asik main, ada yang gangguin.",
        "Gue gak peduliin, tinggalin aja.",
        "Lagi mikirin, gak usah bener-bener serius.",
        "Jangan dibawa serius, nanti malah stress.",
        "Kondisi lagi kacau, gak karuan banget.",
        "Nih, jualan makanan enak banget di sini.",
    }
    local idx = math.random(1, #random)
    local words = random[idx]
    say(words)
    sleep(2000)
end

letter = 10
withnumber = true
setting.generate = function()
    local alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    local withnum = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    local generate = ""
    for i = 1,letter do
        local random = math.random(1,#alphabet)
        local randomnumber = math.random(1,#withnum)
        local acakalpa = string.sub(alphabet,random,random)
        local acaknomor = string.sub(withnum,randomnumber,randomnumber)
        if withnumber then
            generate = generate..acaknomor
        else
            generate = generate..acakalpa
        end
    end
    return generate
end
local find = setting.tutorial()
local trx = setting.generate()

setting.split = function(str, ptr)
    if not ptr then 
        ptr = "%s"
    end
    local tbl = {}
    for string in string.gmatch(str, ptr) do
        table.insert(tbl, string) 
    end
    return tbl
end

for i =  1,farmperbot do
    table.insert(worlds,worldfarm[math.floor((indexbot - 1) * farmperbot + i)])
end

for i = 1,backupPerbot do
    table.insert(backups,backupList[math.floor((indexbot - 1) * backupPerbot + i)])
end

for x = math.floor(pnbtile/2),1,-1 do
    x = x * -1
    table.insert(tilebreak,x)
end

for x = 0, math.ceil(pnbtile/2) - 1 do
    table.insert(tilebreak,x)
end

intent = 5
for i = math.floor(intent/2),1,-1 do
    i = i * -1
    table.insert(tileDirt,i)
end

for i = 0, math.ceil(intent/2) - 1 do
    table.insert(tileDirt,i)
end

setting.punchdirt = function(x,y)
    for _,num in pairs(tileDirt) do
        if getTile(x + 1,y + num).bg ~= 0 then
            return true
        end
    end
    return false
end

setting.punchitem = function(x,y)
    for _,tilepunch in pairs(tilebreak) do
        if getTile(x + tilepunch,y + tileY).fg ~= 0 or getTile(x + tilepunch,y + tileY).bg ~= 0 then
            return true
        end
    end
    return false
end

setting.placeitem = function(x,y)
    for _,tileplace in pairs(tilebreak) do
        if getTile(x + tileplace,y + tileY).fg == 0 and getTile(x+tileplace,y + tileY).bg == 0 then
            return true
        end
    end
    return false
end

setting.itemFloat = function(id)
	count = 0
	for _, obj in pairs(getObjects()) do
		if obj.id == id then
			count = count + obj.count
		end
	end
	return count
end

setting.writeFile = function(info,text)
    local file = io.open(""..info..".txt","a")
    file:write(text.."\n")
    file:close()
end

setting.backupacc = function(threads)
    ::BACK::
    for i = setting.backup, #backups do
        thread = setting.split(backups[i],"([^"..symbol.."]+)")[1]
        threading = setting.split(backups[i],"([^"..symbol.."]+)")[2]
        num = setting.split(backups[i],"([^"..symbol.."]+)")[3] or ""
        if proxy then
            if typeaccount == "guest" then
                if macposition == "left" then
                    addBot(trx,true,num)
                    sleep(1000)
                    setMac(thread)
                    setRid(threading)
                    connect()
                elseif macposition == "right" then
                    addBot(trx,true,num)
                    sleep(1000)
                    setMac(threading)
                    setRid(thread)
                    connect()
                end
            elseif typeaccount == "normal" then
                addBot(thread,threading,num)
            end
        else
            if typeaccount == "guest" then
                if macposition == "left" then
                    addBot(trx)
                    sleep(1000)
                    setMac(thread)
                    setRid(threading)
                    connect()
                elseif macposition == "right" then
                    addBot(trx)
                    sleep(1000)
                    setMac(threading)
                    setRid(thread)
                    connect()
                end
            elseif typeaccount == "normal" then
                addBot(thread,threading)
            end
        end
        sleep(8000)
        setting.botinfo("Changing bot to : [ "..getBot().name.." ]")
        setBool("Auto Reconnect",false)
        if typeaccount == "normal" then
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "aap detected" then
                    setting.botinfo("Failed switch bot to : [ "..getBot().name.." ] status is "..getBot().status..", Removing bots @everyone")
                    setting.writeFile("botbackupstatus","[ "..getBot().name.." ] status is "..getBot().status.."")
                    removeBot(getBot().name)
                    sleep(2000)
                    setting.backup = setting.backup + 1
                    if setting.backup > #backups then
                        print("No more bots to switch, sc terminated")
                        setting.botinfo("No more bots to switch, sc terminated @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    sleep(2000)
                    goto BACK
                end
            end
            if getBot().status:find("online") and getBot().level < maxlevel then
                if proxy then
                    setting.botinfo("Success switch bot to : [ "..getBot().name.." ], proxy : "..getBot().proxy.."")
                else
                    setting.botinfo("Success switch bot to : [ "..getBot().name.." ]")
                end
                break
            elseif getBot().status:find("online") and getBot().level >= maxlevel then
                if proxy then
                    setting.botinfo("Failed switch bot to : [ "..getBot().name.." ], proxy : "..getBot().proxy..", this bot has reached max level, rechecking ur backup bot list")
                else
                    setting.botinfo("Failed switch bot to : [ "..getBot().name.." ], this bot has reached max level, rechecking ur backup bot list")
                end
                removeBot(getBot().name)
                sleep(2000)
                setting.backup = setting.backup + 1
                if setting.backup > #backups then
                    print("No more bots to switch, sc terminated")
                    setting.botinfo("No more bots to switch, sc terminated @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        elseif typeaccount == "guest" then
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" or getBot().status == "got captcha" then
                    setting.botinfo("Bot backup : [ "..getBot().name.." ] status is "..getBot().status..", Terminated script @everyone")
                    setting.writeFile("botbackupstatus","[ "..getMac()..""..symbol..""..getRid().." ] status is "..getBot().status.."")
                    removeBot(getBot().name)
                    sleep(2000)
                    setting.backup = setting.backup + 1
                    if setting.backup > #backups then
                        print("No more bots to switch, sc terminated")
                        setting.botinfo("No more bots to switch, sc terminated @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    goto BACK
                end
            end
            if getBot().status:find("online") and getBot().level < maxlevel then
                if proxy then
                    setting.botinfo("Success add bot to : [ "..getMac()..""..symbol..""..getRid().." ], proxy : "..getBot().proxy.."")
                else
                    setting.botinfo("Success add bot to : [ "..getMac()..""..symbol..""..getRid().." ]")
                end
                break
            elseif getBot().status:find("online") and getBot().level >= maxlevel then
                if proxy then
                    setting.botinfo("Failed switch bot to : [ "..getMac()..""..symbol..""..getRid().." ], proxy : "..getBot().proxy..", this bot has reached max level, rechecking ur backup bot list")
                else
                    setting.botinfo("Failed switch bot to : [ "..getMac()..""..symbol..""..getRid().." ], this bot has reached max level, rechecking ur backup bot list")
                end
                removeBot(getBot().name)
                sleep(2000)
                setting.backup = setting.backup + 1
                if setting.backup > #backups then
                    print("No more bots to switch, sc terminated")
                    setting.botinfo("No more bots to switch, sc terminated @everyone")
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        end
    end
    if findItem(9640) > 0 then
        ::SUCK::
        setting.warp(getBot().name,"")
        setting.wordsrandom()
        while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg ~= 9640 do
            place(9640,0,-1)
            sleep(delayplace)
        end
        if findItem(9640) > 0 then
            goto SUCK
        end
    end
    ::Check::
    if findItem(98) == 0 and pickaxe and getBot().status == "online" then
        setting.takepickaxe()
        goto Check
    end
end

setting.botstatus = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        strings = strings.."\n["..bot.level.."]"..(string.sub(bot.name,1,5)).."" 
    end
    return strings
end

setting.botworld = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        strings = strings.."\n"..(string.sub(bot.world,1,5)).."" 
    end
    return strings
end

setting.botnotif = function()
    strings = ""
    for _, bot in pairs(getBots()) do
        strings = strings.."\n"..(string.upper(bot.status)).."" 
    end
    return strings
end

setting.hookseed = function()
    strings = ""
	for i = 1, #worldseed do
        strings = strings.."\nStorage seed - "..i.." : "..(infoid[worldseed[i]] or "Undefined")..""
    end
    return strings
end

setting.hookpack = function()
    strings = ""
	for i = 1, #worldpack do
        strings = strings.."\nStorage pack - "..i.." : "..(infoid[worldpack[i]] or "Undefined")..""
    end
    return strings
end

setting.hookevent = function()
    strings = ""
	for i = 1, #worldevent do
        strings = strings.."\nStorage event "..i.." : "..(infoid[worldevent[i]] or "Undefined")..""
    end
    return strings
end

setting.botgems = function()
    local count = 0
    for _,bot in pairs(getBots()) do
        count = count + bot.gems
    end
    return count
end

setting.botinfo = function(content)
	if webhookstatus then
		text = [[
			$webHookUrl = "]]..webhookstatuslink..[["
			$payload = @{
				content = "]]..content..[["
			}
			[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
			Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Post -ContentType "application/json"
		]]
		local file = io.popen("powershell -command -", "w")
		file:write(text)
		file:close()
	end
end

setting.goodtimes = function(estimates)
    local seconds = tonumber(estimates)
    if seconds <= 0 then
        return "00:00:00";
    else
        hours = string.format("%02.f", math.floor(estimates/3600));
        minutes = string.format("%02.f", math.floor(estimates/60 - (hours*60)));
        seconds = string.format("%02.f", math.floor(estimates - hours*3600 - minutes *60));
        return ""..hours.." : "..minutes.." : "..seconds
    end
end

setting.checkaccount = function(threads)
    setting.botinfo("[ "..getBot().name.." ] has reached level limit, changing bot if bot switch are enable")
    if findItem(seed) > 0 then
        setting.storingseeds(threads)
    end
    if backuplevel then
        removeBot(getBot().name)
        sleep(2000)
        setting.backupacc(threads)
    else        
        if removingbot then
            removeBot(getBot().name)
            sleep(2000)
        end
        error()
    end
end

setting.indexdirt = function()
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
        ::mtc::
        if math.floor(getBot().x / 32) ~= 48 or math.floor(getBot().y / 32) ~= 23 then
            move(1,0)
            sleep(150)
            setting.reconnect(find,"",math.floor(getBot().x / 32),math.floor(getBot().y / 32))
            goto mtc
        end
    end
    botX = math.floor(getBot().x / 32)
    botY = math.floor(getBot().y / 32)
    for w = 1,34 do
        if getTile(1,w).bg == 14 or getTile(1,w).fg == 2 or getTile(1,w).bg == 14 or getTile(1,w).fg == 2 then
            while getTile(1,w).bg == 14 or getTile(1,w).fg == 2 do
                findPath(1,w-1)
                punch(0,1)
                sleep(delaypunch)
                setting.reconnect(find,"",botX,botY)
            end
            while getTile(0,w).bg == 14 or getTile(0,w).fg == 2 do
                punch(-1,1)
                sleep(delaypunch)
                setting.reconnect(find,"",botX,botY)
            end
            if getBot().level >= 5 then
                break
            end
        end
    end
    for x = 2, 98 do
        if getTile(x, 27).bg == 14 and getTile(x, 27).fg ~= 0 then
            findPath(x - 1, 27)
            sleep(100)
            setting.reconnect(find,"",botX,botY)
            setting.dirt27()
            if getBot().level >= 5 then
                break
            end
        end
    end
    for x = 2, 98 do
        if getTile(x, 32).bg == 14 and getTile(x, 32).fg ~= 0 then
            findPath(x - 1, 32)
            sleep(100)
            setting.reconnect(find,"",botX,botY)
            setting.dirt27()
        end
        if getBot().level >= 5 then
            break
        end
    end
end

setting.webhookinfo = function()
	if botinfo then
        local text = [[
            $webHookUrl = "]]..linkbotinfo..[[/messages/]]..messageidbotinfo..[["
            $payload = @{
                username = "Debra's"
                embeds = @(
                    @{
                        title = "BOT STATICS"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = "TOTAL GEMS & RUNTIME"
                                value = "]]..""..setting.botgems().." | "..setting.goodtimes(os.difftime(os.time(),setting.timechecker))..""..[["
                                inline = "false"
                            }
                            @{
                                name = "GrowID"
                                value = "]]..setting.botstatus()..[["
                                inline = "true"
                            }
                            @{
                                name = "WORLD"
                                value = "]]..setting.botworld()..[["
                                inline = "true"
                            }
                            @{
                                name = "STATUS"
                                value = "]]..setting.botnotif()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Hydrotrium v0.1] Caramoy's`nLast update : ]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

setting.storageinfo = function()
	if infostorage then
        local text = [[
            $webHookUrl = "]]..linkinfostorage..[[/messages/]]..messageidinfostorage..[["
            $payload = @{
                username = "Debra's"
                embeds = @(
                    @{
                        title = "STORAGE STATICS"
                        color = "]]..math.random(111111,999999)..[["
                        fields = @(
                            @{
                                name = ""
                                value = "]]..setting.hookseed()..[["
                                inline = "true"
                            }
                            @{
                                name = ""
                                value = "]]..setting.hookpack()..[["
                                inline = "true"
                            }
                            @{
                                name = ""
                                value = "]]..setting.hookevent()..[["
                                inline = "true"
                            }
                        )
                        footer = @{
                            text = "[Hydrotrium v0.1] Caramoy's`nLast update : ]]..(os.date("!%a %b %d, %Y at %I:%M %p", os.time() + 7 * 60 * 60))..[["
                        }
                    }
                )
            }
            [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
            Invoke-RestMethod -Uri $webHookUrl -Body ($payload | ConvertTo-Json -Depth 4) -Method Patch -ContentType 'application/json'
        ]]
        local pipe = io.popen("powershell -command -", "w")
        pipe:write(text)
        pipe:close()
    end
end

setting.reconnect = function(world,id,x,y)
    if getBot().world ~= world:upper() and getBot().status == "online" then 
        setting.botinfo("[ "..getBot().name.." ] at EXIT, trying to joining world again @everyone")
        local count = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                count = count + 1
                if count > 5 then
                    setting.botinfo("[ "..getBot().name.." ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if not pnbother then
            if id ~= "" then
                local stucks = 0
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                    sleep(delaywarp)
                    if stucks > 3 then
                        setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                        error()
                    end
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        else
            if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
                ::mtc::
                if math.floor(getBot().x / 32) ~= 48 or math.floor(getBot().y / 32) ~= 23 then
                    move(1,0)
                    sleep(150)
                    goto mtc
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        end
        setting.botinfo("[ "..getBot().name.." ] success to joining world @everyone")
    end
    if getBot().status ~= "online" then
        setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status.." @everyone")
        while getBot().status ~= "online" do
            connect()
            sleep(delayreconnect)
            if getBot().status == "suspended" or getBot().status == "banned" then
                setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status..", removing bot @everyone")
                if backupwhensuspend then
                    removeBot(getBot().name)
                    sleep(2000)
                    setting.botinfo("Backup are enable, changing bot [ "..getBot().name.." ]")
                    setting.backupacc(threads)
                else
                    if removingbot then
                        removeBot(getBot().name)
                        sleep(2000)
                    end
                    error()
                end
            end
        end
        local counts = 0
        while getBot().world ~= world:upper() do
            sendPacket("action|join_request\nname|"..world:upper().."\ninvitedWorld|0",3)
            sleep(delaywarp)
            if getBot().world ~= world:upper() then 
                counts = counts + 1
                if counts > 5 then
                    setting.botinfo("[ "..getBot().name.." ] Failed to joining world again, terminated script @everyone")
                    error()
                end
            end
        end
        if not pnbother then
            if id ~= "" then
                local stucks = 0
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                    sleep(delaywarp)
                    if stucks > 3 then
                        setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                        error()
                    end
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        else
            if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
                ::mtc::
                if math.floor(getBot().x / 32) ~= 48 or math.floor(getBot().y / 32) ~= 23 then
                    move(1,0)
                    sleep(150)
                    goto mtc
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        end
        setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status.." @everyone")
    end
    if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
        setting.botinfo("[ "..getBot().name.." ] Stuck at white door ! @everyone")
        if not pnbother then
            if id ~= "" then
                local stucks = 0
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                    sleep(delaywarp)
                    if stucks > 3 then
                        setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                        error()
                    end
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        else
            if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 then
                ::mtc::
                if math.floor(getBot().x / 32) ~= 48 or math.floor(getBot().y / 32) ~= 23 then
                    move(1,0)
                    sleep(150)
                    goto mtc
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
        end
        setting.botinfo("[ "..getBot().name.." ] Already back to pos ! @everyone")
    end
    for _, idx in pairs(transcedence) do
        if getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == idx then
            setting.botinfo("[ "..getBot().name.." ] Stuck! disconnecting bot @everyone")
            print("Bot are stuck! Disconnecting bots")
            disconnect()
            sleep(3000)
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" then
                    setting.botinfo("[ "..getBot().name.." ] status is "..getBot().status..", removing bot @everyone")
                    if backupwhensuspend then
                        removeBot(getBot().name)
                        sleep(2000)
                        setting.botinfo("Backup are enable, changing bot [ "..getBot().name.." ]")
                        setting.backupacc(threads)
                    else
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                end
            end
            local stuck = 0
            if id ~= "" then
                while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 do
                    sendPacket("action|join_request\nname|" ..world:upper().."|"..id:upper().."\ninvitedWorld|0", 3)
                    sleep(delaywarp)
                    if stuck > 3 then
                        setting.botinfo("[ "..getBot().name.." ] Failed to reconnecting bot, stuck at white door. Terminated script @everyone")
                    end
                end
            end
            if x and y then
                while math.floor(getBot().x / 32) ~= x or math.floor(getBot().y / 32) ~= y do
                    findPath(x,y)
                    sleep(150)
                end
            end
            setting.botinfo("[ "..getBot().name.." ] Already back to pos ! @everyone")
            print("[ "..getBot().name.." ] Already back to pos ! @everyone")
        end
    end
end

setting.warp = function(world,door)
    name = world
    if door ~= "" then
        name = name .. "|" ..door
    end
    if getBot().world ~= string.upper(world) then
        addHook("onvariant","nuked",function (varlist)
            if varlist[0] == "OnConsoleMessage" then
                if string.find(varlist[1],"inaccessible.") or string.find(varlist[1],"level") then
                    nuked = true
                end
                if string.find(varlist[1],"experiencing") then
                    subserver = true
                end
            end
        end)
        local count = 0 
        while getBot().world ~= string.upper(world) and not nuked and not subserver do
            while getBot().status ~= "online" do
                connect()
                sleep(delayreconnect)
                if getBot().status == "suspended" or getBot().status == "banned" then
                    if backupwhensuspend then
                        removeBot(getBot().name)
                        sleep(2000)
                        setting.botinfo("Backup are enable, changing bot [ "..getBot().name.." ]")
                        setting.backupacc(threads)
                    else
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                end
            end
            sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
            sleep(delaywarp)
            count = count + 1
            if count == 10 then
                failwarp = true
            end
        end
        removeHooks()
        sleep(2000)
    end
    if getBot().world == string.upper(world) then
        if door ~= "" then
            local stuck = 0
            while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32)).fg == 6 and not wrong do
                while getBot().status ~= "online" do
                    connect()
                    sleep(delayreconnect)
                    if getBot().status == "suspended" or getBot().status == "banned" then
                        if backupwhensuspend then
                            removeBot(getBot().name)
                            sleep(2000)
                            setting.botinfo("Backup are enable, changing bot [ "..getBot().name.." ]")
                            setting.backupacc(threads)
                        else
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                    end
                end
                sendPacket("action|join_request\nname|"..name.."\ninvitedWorld|0",3)
                sleep(delaywarp)
                stuck = stuck + 1
                if stuck == 5 then
                    wrong = true
                end
            end
        end
        for i, tile in pairs(getTiles()) do
            if getTile(tile.x,tile.y).extra == 16 then
                fire = true
            end
        end
    end
end

setting.buying = function(threads)
    setJob("Buying packs")
    if findItem(112) >= mingems then
        if upbackpack then
            while getBot().slots < 36 do
                sendPacket("action|buy\nitem|upgrade_backpack",2)
                sleep(4000)
            end
        end
        while findItem(112) >= pricepack do
            sendPacket("action|buy\nitem|"..debug,2)
            sleep(4000)
            if findItem(packList[1]) >= 200 then
                break
            end
        end
    end
end

setting.joinworld = function()
    for _, world in pairs(worldclearhistory) do
        ::BACK::
        setJob("Clearing history")
        setting.warp(world,"")
        setting.wordsrandom()
        move(1,0)
        sleep(250)
        setting.reconnect(world,"")
        if not failwarp then
            if not subserver then
                if not nuked then
                else
                    nuked = false
                    sleep(5000)
                    print("World clearing history has nuked or level higher!!, change ur world history list")
                    setting.botinfo("World clearing history has nuked or level higher!!, change ur world history list. SC Terminated @everyone")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
end


setting.takepickaxe = function()
    ::BACK::
    world = setting.split(worldpickaxe[index],"[^:]+")[1]
    door = setting.split(worldpickaxe[index],"[^:]+")[2]
    setJob("Take pickaxe")
    setting.warp(world,door)
    setting.wordsrandom()
    if not failwarp then
        if not subserver then
            if not nuked then
                if not wrong then
                    if findItem(98) == 0 then
                        for _, obj in pairs(getObjects()) do
                            if obj.id == 98 then
                                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                sleep(1000)
                                collect(2)
                                sleep(1000)
                                setting.reconnect(world,door,math.floor(obj.x / 32),math.floor(obj.y / 32))
                            end
                            if findItem(98) > 0  then
                                wear(98)
                                sleep(500)
                                move(-1,0)
                                sleep(1000)
                                drop(98,findItem(98) - 1)
                                sleep(1000)
                                break
                            end
                        end
                    end
                else
                    wrong = false
                    sleep(5000)
                    print("Id door world take support items is wrong, check ur id door !!")
                    setting.botinfo("Id door world take support items is wrong, check ur id door !, terminated script @everyone")
                    error()
                end
            else
                nuked = false
                sleep(5000)
                print("World take support items is nuked or level higher, check ur world!!")
                setting.botinfo("World take support items is nuked or level higher, check ur world !, terminated script @everyone")
                error()
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto BACK
        end
    else
        failwarp = false
        sleep(5000)
        print("Fail warp, sleeping for 2 minutes")
        setting.botinfo("Fail warp, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end


setting.takingseed = function(threads)
    for i = setting.take , #worldseed do
        ::BACK::
        setJob("Take seed")
        world = worldseed[i]
        setting.warp(world,doorworldseed)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if setting.itemFloat(seed) == 0 then
                            infoid[world] = ""..setting.itemFloat(seed).." EMPTY !!"
                            setting.botinfo("eeds storage : [ "..world.." ] has empty, skipped world @everyone")
                            print("Seeds storage : [ "..world.." ] has empty, skipped world")
                            setting.take = setting.take + 1
                            if setting.take > #worldseed then
                                infoid[world] = ""..setting.itemFloat(seed).." EMPTY !!"
                                setting.botinfo("All seeds storage has empty @everyone")
                                print("All seeds storage has empty")
                                break
                            end
                        else
                            for _, object in pairs(getObjects()) do
                                if object.id == seed then
                                    findPath(math.floor((object.x)/32), math.floor((object.y)/32))
                                    sleep(1000)
                                    collect(2)
                                    sleep(1000)
                                    setting.reconnect(world,doorworldseed,math.floor((object.x)/32), math.floor((object.y)/32))
                                end
                                if findItem(seed) > 0 then
                                    break
                                end
                            end
                            sleep(100)
                            break
                        end
                    else
                        infoid[world] = "WRONG DOOR ID"
                        wrong = false
                        sleep(5000)
                        setting.botinfo("Seeds storage : [ "..world.." ] is wrong door id, skipped world @everyone")
                        print("Seeds storage : [ "..world.." ] is wrong door id, skipped world")
                        setting.take = setting.take + 1
                        if setting.take > #worldseed then
                            setting.botinfo("All seeds storage has empty, Removing bot : [ "..getBot().name.." ] @everyone")
                            print("All seeds storage has empty, Removing bot : [ "..getBot().name.." ]")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                    end
                else
                    infoid[world] = "NUKED"
                    nuked = false
                    sleep(5000)
                    setting.botinfo("Seeds storage : [ "..world.." ] is NUKED, skipped world @everyone")
                    print("Seeds storage : [ "..world.." ] is NUKED, skipped world")
                    setting.take = setting.take + 1
                    if setting.take > #worldseed then
                        setting.botinfo("All seeds storage has empty, Removing bot : [ ||"..getBot().name.."|| ] @everyone")
                        print("All seeds storage has empty, Removing bot : [ "..getBot().name.." ]")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
    infoid[world] = ""..setting.itemFloat(seed)..""
end

setting.support = function()
    ::BACK::
    setJob("Take support items")
    world = setting.split(worlditemtowear[index],"[^:]+")[1]
    door = setting.split(worlditemtowear[index],"[^:]+")[2]
    setting.warp(world,door)
    setting.wordsrandom()
    setting.webhookinfo()
    if not failwarp then
        if not subserver then
            if not nuked then
                if not wrong then
                    if findItem(iditemtowear) == 0 and setting.itemFloat(iditemtowear) >= itemkeep then
                        for _, obj in pairs(getObjects()) do
                            if obj.id == iditemtowear then
                                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                                sleep(1000)
                                collect(range)
                                sleep(1000)
                                if findItem(iditemtowear) > 0  then
                                    move(-1,0)
                                    sleep(500)
                                    wear(iditemtowear)
                                    sleep(500)
                                    drop(iditemtowear,findItem(iditemtowear) - itemkeep)
                                    sleep(500)
                                    print("[ "..getBot().name.." ] Success take and wear the support items!")
                                    setting.botinfo("[ "..getBot().name.." ] Success take and wear the support items!")
                                    break
                                end
                            end
                        end
                    else
                        print("Support item is empty, Drop the support item right now!")
                        setting.botinfo("Support item is empty, Drop the support item right now! @everyone")
                    end
                else
                    wrong = false
                    sleep(5000)
                    print("Id door world take support items is wrong, check ur id door!")
                    setting.botinfo("Id door world take support items is wrong, check ur id door! @everyone")
                    error()
                end
            else
                nuked = false
                sleep(5000)
                print("World take support items is nuked, check ur world!")
                setting.botinfo("World take support items is nuked, check ur world! @everyone")
                error()
            end
        else
            subserver = false
            sleep(5000)
            print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
            setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
            sleep(120000)
            goto BACK
        end
    else
        failwarp = false
        sleep(5000)
        print("Fail warp, sleeping for 2 minutes")
        setting.botinfo("Fail warp, sleeping for 2 minutes")
        sleep(120000)
        goto BACK
    end
end

setting.storingevents = function(threads)
    for i = setting.event , #worldevent do
        ::Here::
        setJob("Dropping events")
        world = worldevent[i]
        setting.warp(world,doorworldevent)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if setting.itemFloat(eventList[1]) >= limitevent then
                            infoid[world] = "["..setting.itemFloat(eventList[1]).."] LIMIT !!!"
                            setting.botinfo("Events storage : [ "..world.." ] has reached limit, skipped world @everyone")
                            print("Events storage : [ "..world.." ] has reached limit, skipped world")
                            setting.event = setting.event + 1
                            if setting.event > #worldevent then
                                infoid[world] = "["..settingitemFloat(eventList[1]).."] LIMIT !!!"
                                setting.botinfo("All events storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                print("All events storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileEvent = 0
                        else
                            for y,pack in pairs(eventList) do
                                for i,tile in pairs(getTiles()) do
                                    if separated then
                                        if tile.fg == 0 or tile.bg == 0 then
                                            ::BACK::
                                            findPath(eventX + (tileEvent),eventY - (y - 1))
                                            sleep(1000)
                                            local count = 0
                                            setting.reconnect(world,doorworldevent,eventX + (tileEvent),eventY - (y - 1))
                                            if eventX + (tileEvent) >= 98 then
                                                eventY = eventY - 1
                                                tileEvent = 0
                                            end
                                            while findItem(pack) > 0 do
                                                drop(pack)
                                                sleep(delaydrop)
                                                setting.reconnect(world,doorworldevent,eventX + (tileEvent),eventY - (y - 1))
                                                count = count + 1
                                                if count >= 2 then
                                                    tileEvent = tileEvent + 1
                                                    goto BACK
                                                end
                                            end
                                        end
                                        if findItem(pack) == 0 then
                                            break
                                        end
                                    else
                                        if tile.fg == 0 or tile.bg == 0 then
                                            ::BACK::
                                            findPath(eventX + (tileEvent),eventY)
                                            sleep(1000)
                                            local count = 0
                                            setting.reconnect(world,doorworldevent,eventX + (tileEvent),eventY)
                                            if eventX + (tileEvent) >= 98 then
                                                eventY = eventY - 1
                                                tileEvent = 0
                                            end
                                            while findItem(pack) > 0 do
                                                drop(pack)
                                                sleep(delaydrop)
                                                setting.reconnect(world,doorworldevent,eventX + (tileEvent),eventY)
                                                count = count + 1
                                                if count >= 2 then
                                                    tileEvent = tileEvent + 1
                                                    goto BACK
                                                end
                                            end
                                        end
                                        if findItem(pack) == 0 then
                                            break
                                        end
                                    end
                                end
                            end
                            sleep(100)
                            break
                        end
                    else
                        infoid[world] = "WRONG DOOR !!!"
                        wrong = false
                        sleep(5000)
                        print("[ "..world.." ] Id door events storage is wrong, check ur id door!")
                        setting.botinfo("[ "..world.." ] Id door events storage is wrong, check ur id door! @everyone")
                        setting.event = setting.event + 1
                        if setting.event > #worldevent then
                            print("All events storage has reached limit")
                            setting.botinfo("All events storage has reached limit! Removing bot : [ "..getBot().name.." ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileEvent = 0
                    end
                else
                    infoid[world] = "NUKED !!!"
                    nuked = false
                    sleep(5000)
                    print("[ "..world.." ] event Storage is NUKED, check ur storage!")
                    setting.botinfo("[ "..world.." ] event Storage is NUKED, check ur storage! @everyone")
                    setting.event = setting.event + 1
                    if setting.event > #worldevent then
                        print("All events storage has reached limit!")
                        setting.botinfo("All events storage has reached limit! Removing bot : [ "..getBot().name.." ] @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tileEvent = 0
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto Here
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(eventList[1]).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.dirt27 = function()
    botX = math.floor(getBot().x / 32)
    botY = math.floor(getBot().y / 32)
    while setting.punchdirt(botX,botY) do
        for _,i in pairs(tileDirt) do
            if getTile(botX + 1,botY + i).bg ~= 0 then
                punch(1,i)
                sleep(delaypunch)
                setting.reconnect(find,"",botX,botY)
            end
        end
    end
end

setting.storingpacks = function(threads)
    for i = setting.pack , #worldpack do
        ::Here::
        setJob("Dropping packs")
        world = worldpack[i]
        setting.warp(world,doorworldpack)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if setting.itemFloat(packList[1]) >= limitpack then
                            infoid[world] = "["..setting.itemFloat(packList[1]).."] LIMIT !!!"
                            setting.botinfo("Packs storage : [ "..world.." ] has reached limit, skipped world @everyone")
                            print("Packs storage : [ "..world.." ] has reached limit, skipped world")
                            setting.pack = setting.pack + 1
                            if setting.pack > #worldpack then
                                infoid[world] = "["..setting.itemFloat(packList[1]).."] LIMIT !!!"
                                setting.botinfo("All packs storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                print("All packs storage has reached limit, Removing bot : [ "..getBot().name.." ]")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tilePack = 0
                        else
                            for y,pack in pairs(packList) do
                                for i,tile in pairs(getTiles()) do
                                    if separated then
                                        if tile.fg == 0 or tile.bg == 0 then
                                            ::BACK::
                                            findPath(packX + (tilePack),packY - (y-1))
                                            sleep(1000)
                                            local count = 0
                                            setting.reconnect(world,doorworldpack,packX + (tilePack),packY - (y-1))
                                            if packX + (tilePack) >= 98 then
                                                packY = packY - 1
                                                tilePack = 0
                                            end
                                            while findItem(pack) > 0 do
                                                drop(pack)
                                                sleep(delaydrop)
                                                setting.reconnect(world,doorworldpack,packX + (tilePack),packY - (y-1))
                                                count = count + 1
                                                if count >= 2 then
                                                    tilePack = tilePack + 1
                                                    goto BACK
                                                end
                                            end
                                        end
                                        if findItem(pack) == 0 then
                                            break
                                        end
                                    else
                                        if tile.fg == 0 or tile.bg == 0 then
                                            ::BACK::
                                            findPath(packX + (tilePack),packY)
                                            sleep(1000)
                                            local count = 0
                                            setting.reconnect(world,doorworldpack,packX + (tilePack),packY)
                                            if packX + (tilePack) >= 98 then
                                                packY = packY - 1
                                                tilePack = 0
                                            end
                                            while findItem(pack) > 0 do
                                                drop(pack)
                                                sleep(delaydrop)
                                                setting.reconnect(world,doorworldpack,packX + (tilePack),packY)
                                                count = count + 1
                                                if count >= 2 then
                                                    tilePack = tilePack + 1
                                                    goto BACK
                                                end
                                            end
                                        end
                                        if findItem(pack) == 0 then
                                            break
                                        end
                                    end
                                end
                            end
                            sleep(100)
                            break
                        end
                    else
                        infoid[world] = "WRONG DOOR !!!"
                        wrong = false
                        sleep(5000)
                        print("[ "..world.." ] Id door packs storage is wrong, check ur id door!")
                        setting.botinfo("[ "..world.." ] Id door packs storage is wrong, check ur id door! @everyone")
                        setting.pack = setting.pack + 1
                        if setting.pack > #worldpack then
                            print("All packs storage has reached limit")
                            setting.botinfo("All packs storage has reached limit! Removing bot : [ "..getBot().name.." ] @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tilePack = 0
                    end
                else
                    infoid[world] = "NUKED !!!"
                    nuked = false
                    sleep(5000)
                    print("[ "..world.." ] packs Storage is NUKED, check ur storage!")
                    setting.botinfo("[ "..world.." ] packs Storage is NUKED, check ur storage! @everyone")
                    setting.pack = setting.pack + 1
                    if setting.pack > #worldpack then
                        print("All packs storage has reached limit!")
                        setting.botinfo("All packs storage has reached limit! Removing bot : [ "..getBot().name.." ] @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tilePack = 0
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto Here
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(packList[1]).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

setting.storingseeds = function(threads)
    for i = setting.seed , #worldseed do
        ::Here::
        world = worldseed[i]
        setJob("Dropping seeds")
        setting.warp(world,doorworldseed)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if setting.itemFloat(seed) >= limitseed then
                            infoid[world] = "["..setting.itemFloat(seed).."] LIMIT !!!"
                            setting.botinfo("Seeds storage : [ "..world.." ] has reached limit, skipped world @everyone")
                            print("Seeds storage : [ "..world.." ] has reached limit, skipped world")
                            setting.seed = setting.seed + 1
                            if setting.seed > #worldseed then
                                infoid[world] = "["..setting.itemFloat(seed).."] LIMIT !!!"
                                setting.botinfo("All seeds storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                print("All seeds storage has reached limit, Removing bot : [ "..getBot().name.." ] @everyone")
                                if removingbot then
                                    removeBot(getBot().name)
                                    sleep(2000)
                                end
                                error()
                            end
                            tileSeed = 0
                        else
                            for i,tile in pairs(getTiles()) do
                                if tile.fg == 0 or tile.bg == 0 then
                                    ::BACK::
                                    findPath(seedX + (tileSeed),seedY)
                                    sleep(1000)
                                    local count = 0
                                    setting.reconnect(world,doorworldseed,seedX + (tileSeed),seedY)
                                    if seedX + (tileSeed) >= 98 then
                                        seedY = seedY - 1
                                        tileSeed = 0
                                    end
                                    while findItem(seed) > 0 do
                                        drop(seed)
                                        sleep(delaydrop)
                                        setting.reconnect(world,doorworldseed,seedX + (tileSeed),seedY)
                                        count = count + 1
                                        if count >= 2 then
                                            tileSeed = tileSeed + 1
                                            goto BACK
                                        end
                                    end
                                end
                                if findItem(seed) == 0 then
                                    break
                                end
                            end
                            sleep(100)
                            break
                        end
                    else
                        infoid[world] = "WRONG DOOR !!!"
                        wrong = false
                        sleep(5000)
                        print("[ "..world.." ] Id door seeds storage is wrong, check ur id door!")
                        setting.botinfo("[ "..world.." ] Id door seeds storage is wrong, check ur id door! @everyone")
                        setting.seed = setting.seed + 1
                        if setting.seed > #worldseed then
                            print("All seeds storage has reached limit")
                            setting.botinfo("All seeds storage has reached limit @everyone")
                            if removingbot then
                                removeBot(getBot().name)
                                sleep(2000)
                            end
                            error()
                        end
                        tileSeed = 0
                    end
                else
                    infoid[world] = "NUKED !!!"
                    nuked = false
                    sleep(5000)
                    print("[ "..world.." ] seeds Storage is NUKED, check ur storage!")
                    setting.botinfo("[ "..world.." ] seeds Storage is NUKED, check ur storage! @everyone")
                    setting.seed = setting.seed + 1
                    if setting.seed > #worldseed then
                        print("All seeds storage has reached limit!")
                        setting.botinfo("All seeds storage has reached limit! @everyone")
                        if removingbot then
                            removeBot(getBot().name)
                            sleep(2000)
                        end
                        error()
                    end
                    tileSeed = 0
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto Here
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto Here
        end
    end
    infoid[world] = "["..setting.itemFloat(seed).."]"
    setting.storageinfo()
    if clearhistory then
        setting.joinworld()
    end
end

local network = math.random(5,95)
setting.rotate = function(threads,static,blockid)
    if not pnbother then
        ::BACK::
        setJob("PNB")
        while math.floor(getBot().x / 32) ~= network or math.floor(getBot().y / 32) ~= 1 do
            findPath(network,1)
            sleep(500)
        end
        botX = math.floor(getBot().x / 32)
        botY = math.floor(getBot().y / 32)
        if pnbtile == 1 then
            while findItem(blockid) >= pnbtile do
                if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                    punch(0,tileY)
                    sleep(delaypunch)
                    setting.reconnect(threads,static,botX,botY)
                end
                if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                    place(blockid,0,tileY)
                    sleep(delayplace)
                    setting.reconnect(threads,static,botX,botY)
                end
                collect(2)
                sleep(30)
                if getBot().level >= maxlevel and backuplevel then
                    setting.checkaccount(threads)
                    setJob("Pnb")
                    setting.warp(threads,static)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
                if findItem(112) >= mingems and buypack then
                    setting.buying(threads)
                    setting.storingpacks(threads)
                    setJob("Pnb")
                    setting.warp(threads,static)
                    setting.wordsrandom()
                    goto BACK
                end
            end
        else
            while findItem(idblockleveling) >= pnbtile do
                while setting.placeitem(botX,botY) do
                    for _,i in pairs(tilebreak) do
                        if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                            place(blockid,i,tileY)
                            sleep(delayplace)
                            setting.reconnect(threads,static,botX,botY)
                        end
                    end
                end
                while setting.punchitem(botX,botY) do
                    for _,i in pairs(tilebreak) do
                        if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                            punch(i,tileY)
                            sleep(delaypunch)
                            setting.reconnect(threads,static,botX,botY)
                        end
                    end
                end
                collect(3)
                sleep(30)
                if getBot().level >= maxlevel and backuplevel then
                    setting.checkaccount(threads)
                    setJob("Pnb")
                    setting.warp(threads,static)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
                if findItem(112) >= mingems and buypack then
                    setting.buying(threads)
                    setting.storingpacks(threads)
                    setJob("Pnb")
                    setting.warp(threads,static)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
            end
        end
    else
        ::BACK::
        setJob("PNB")
        setting.warp(find,"")
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    ::mtc::
                    if math.floor(getBot().x / 32) ~= 48 or math.floor(getBot().y / 32) ~= 23 then
                        move(1,0)
                        sleep(150)
                        setting.reconnect(find,"",math.floor(getBot().x / 32),math.floor(getBot().y / 32))
                        goto mtc
                    end
                    while math.floor(getBot().x / 32) ~= posX or math.floor(getBot().y / 32) ~= posY do
                        findPath(posX,posY)
                        sleep(150)
                        setting.reconnect(find,"",math.floor(getBot().x / 32),math.floor(getBot().y / 32))
                    end
                    botX = math.floor(getBot().x / 32)
                    botY = math.floor(getBot().y / 32)
                    if pnbtile == 1 then
                        while findItem(blockid) >= pnbtile do
                            if getTile(botX,botY + tileY).bg ~= 0 or getTile(botX, botY + tileY).fg ~= 0 then
                                punch(0,tileY)
                                sleep(delaypunch)
                                setting.reconnect(find,"",botX,botY)
                            end
                            if getTile(botX,botY + tileY).bg == 0 or getTile(botX, botY + tileY).fg == 0 then
                                place(blockid,0,tileY)
                                sleep(delayplace)
                                setting.reconnect(find,"",botX,botY)
                            end
                            collect(2)
                            sleep(30)
                            if getBot().level >= maxlevel and backuplevel then
                                setting.checkaccount(threads)
                                goto BACK
                            end
                            if findItem(112) >= mingems and buypack then
                                setting.buying(threads)
                                setting.storingpacks(threads)
                                goto BACK
                            end
                        end
                    else
                        while findItem(blockid) >= pnbtile do
                            while setting.placeitem(botX,botY) do
                                for _,i in pairs(tilebreak) do
                                    if getTile(botX + i,botY + tileY).fg == 0 and getTile(botX + i,botY + tileY).bg == 0 then
                                        place(blockid,i,tileY)
                                        sleep(delayplace)
                                        setting.reconnect(find,"",botX,botY)
                                    end
                                end
                            end
                            while setting.punchitem(botX,botY) do
                                for _,i in pairs(tilebreak) do
                                    if getTile(botX + i,botY + tileY).fg ~= 0 or getTile(botX + i,botY + tileY).bg ~= 0 then
                                        punch(i,tileY)
                                        sleep(delaypunch)
                                        setting.reconnect(find,"",botX,botY)
                                    end
                                end
                            end
                            collect(3)
                            sleep(30)
                            if getBot().level >= maxlevel and backuplevel then
                                setting.checkaccount(threads)
                                goto BACK
                            end
                            if findItem(112) >= mingems and buypack then
                                setting.buying(threads)
                                setting.storingpacks(threads)
                                goto BACK
                            end
                        end
                    end
                else
                    nuked = false
                    sleep(5000)
                    setting.botinfo("World : [ "..find.." ] is NUKED @everyone")
                    print("World pnb : [ "..find.." ] is NUKED, terminated script")
                    error()
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end
    end
    setting.recycles(threads)
end

setting.recycles = function(threads)
    for i , list in ipairs(trashList) do
        if findItem(list) > amount then
            sendPacket("action|trash\n|itemID|" .. list,2)
            sleep(4000)
            sendPacket("action|dialog_return\ndialog_name|trash_item\nitemID|" .. list .. "|\ncount|" .. findItem(list),2)
            sleep(4000)
        end
    end
end
setting.rechecking = function(threads)
    setJob("Rechecking")
    ::BACK::
    for _, tile in pairs(getTiles()) do
        if tile.fg == seed and tile.ready then
            findPath(tile.x,tile.y)
            setting.reconnect(threads,doorfarm,tile.x,tile.y)
            if tile.fg == seed then
                punch(0,0)
                sleep(delayharvest)
                setting.reconnect(threads,doorfarm,tile.x,tile.y)
            end
            if ignoregems then
                collect(range,112)
            else
                collect(range)
            end
            sleep(30)
        end
        if findItem(iditemtowear) == 0 then
            if itemtowear then
                setting.support()
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
            end
        end
        if findItem(block) > 180 then
            if pnbother then
                setting.rotate(threads,doorfarm,block)
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
            else
                setting.rotate(threads,doorfarm,block)
            end
        end
        if findItem(eventList[1]) > amountevent then
            setting.storingevents(threads)
            setJob("Rechecking")
            setting.warp(threads,doorfarm)
            setting.wordsrandom()
            setting.webhookinfo()
        elseif findItem(seed) >= amountseed then
            if dontplant then
                setting.storingseeds(threads)
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
            else
                setting.plant(threads,doorfarm,seed)
                if findItem(seed) >= amountseed then
                    setting.storingseeds(threads)
                    setJob("Harvesting")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                end
                goto BACK
            end
        elseif findItem(112) > mingems and buypack then
            setting.buying(threads)
            setting.storingpacks(threads)
            setJob("Rechecking")
            setting.warp(threads,doorfarm)
            setting.wordsrandom()
            setting.webhookinfo()
        end
    end
    for _, obj in pairs(getObjects()) do
        if obj.id == block then
            if setting.itemFloat(block) ~= 0 then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(30)
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                setting.reconnect(threads,doorfarm,math.floor(obj.x / 32),math.floor(obj.y / 32))
            end
            if findItem(block) > 180 then
                if pnbother then
                    setting.rotate(threads,doorfarm,block)
                    setJob("Rechecking")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                else
                    setting.rotate(threads,doorfarm,block)
                end
            end
            if findItem(eventList[1]) > amountevent then
                setting.storingevents(threads)
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
            elseif findItem(seed) >= amountseed then
                if dontplant then
                    setting.storingseeds(threads)
                    setJob("Rechecking")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                else
                    setting.plant(threads,doorfarm,seed)
                    if findItem(seed) >= amountseed then
                        setting.storingseeds(threads)
                        setJob("Harvesting")
                        setting.warp(threads,doorfarm)
                        setting.wordsrandom()
                        setting.webhookinfo()
                    end
                    goto BACK
                end
            elseif findItem(112) > mingems and buypack then
                setting.buying(threads)
                setting.storingpacks(threads)
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
            end
        end
    end
    if not dontplant then
        for _, tile in pairs(getTiles()) do
            if tile.fg == 0 and getTile(tile.x,tile.y + 1).flags ~= 0 and findItem(seed) ~= 0 then
                findPath(tile.x,tile.y)
                setting.reconnect(threads,doorfarm,tile.x,tile.y)
                if tile.fg ~= seed then
                    place(seed,0,0)
                    sleep(delayplant)
                    setting.reconnect(threads,doorfarm,tile.x,tile.y)
                end
            end
            if findItem(seed) == 0 then
                setting.takingseed(threads)
                setJob("Rechecking")
                setting.warp(threads,doorfarm)
                setting.wordsrandom()
                setting.webhookinfo()
                if findItem(seed) ~= 0 then 
                    goto BACK
                else
                    break
                end
            end
        end
        if findItem(seed) >= amountseed then
            setting.storingseeds(threads)
            setJob("Rechecking")
            setting.warp(threads,doorfarm)
            setting.wordsrandom()
            setting.webhookinfo()
        end
    end
end

setting.harvest = function(threads)
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    setJob("Harvesting")
    ::BACK::
    for y = -1, 53 do
        for x = tileA, tileB, tileC do
            if getTile(x,y).fg == seed and getTile(x,y).ready then
                if getBot().level >= maxlevel and backuplevel then
                    setting.checkaccount(threads)
                    setJob("Harvesting")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
                if findItem(block) > 180 then
                    if pnbother then
                        setting.rotate(threads,"",block)
                        setJob("Harvesting")
                        setting.warp(threads,doorfarm)
                        setting.wordsrandom()
                        setting.webhookinfo()
                        goto BACK
                    else
                        setting.rotate(threads,doorfarm,block)
                        goto BACK
                    end
                end
                if findItem(iditemtowear) == 0 then
                    if itemtowear then
                        setting.support()
                        setJob("Harvesting")
                        setting.warp(threads,doorfarm)
                        setting.wordsrandom()
                        setting.webhookinfo()
                        goto BACK
                    end
                end
                if findItem(eventList[1]) > amountevent then
                    setting.storingevents(threads)
                    setJob("Harvesting")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                elseif findItem(seed) > amountseed then
                    if dontplant then
                        setting.storingseeds(threads)
                        setJob("Harvesting")
                        setting.warp(threads,doorfarm)
                        setting.wordsrandom()
                        setting.webhookinfo()
                        goto BACK
                    else
                        setting.plant(threads,doorfarm,seed)
                        if findItem(seed) >= amountseed then
                            setting.storingseeds(threads)
                            setJob("Harvesting")
                            setting.warp(threads,doorfarm)
                            setting.wordsrandom()
                            setting.webhookinfo()
                        end
                        goto BACK
                    end
                elseif findItem(112) > mingems and buypack then
                    setting.buying(threads)
                    setting.storingpacks(threads)
                    setJob("Harvesting")
                    setting.warp(threads,doorfarm)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
                findPath(x,y)
                setting.reconnect(threads,doorfarm,x,y)
                if getTile(x,y).fg == seed then
                    punch(0,0)
                    sleep(delayharvest)
                    setting.reconnect(threads,doorfarm,x,y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(30)
            end
        end
        if tileD == 1 then
            if tileA == 0 then
                tileA = 99
                tileB = 0
                tileC = -1
                tileD = 0
            elseif tileA == 99 then
                tileA = 0
                tileB = 99
                tileC = 1
                tileD = 0
            end
        elseif tileD == 0 then
            tileD = tileD + 1
        end
    end
end

setting.levelingcek = function(threads)
    setJob("Rechecking")
    ::BACK::
    for _, obj in pairs(getObjects()) do
        if obj.id == idblockleveling then
            if setting.itemFloat(idblockleveling) ~= 0 then
                findPath(math.floor(obj.x / 32),math.floor(obj.y / 32))
                sleep(30)
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                setting.reconnect(threads,doorworldleveling,math.floor(obj.x / 32),math.floor(obj.y / 32))
            end
            if findItem(idblockleveling) > 180 then
                if pnbother then
                    setting.rotate(threads,doorworldleveling,idblockleveling)
                    setJob("Rechecking")
                    setting.warp(threads,doorworldleveling)
                    setting.wordsrandom()
                    setting.webhookinfo()
                else
                    setting.rotate(threads,doorworldleveling,idblockleveling)
                end
            end
            if findItem(eventList[1]) > amountevent then
                setting.storingevents(threads)
                setJob("Rechecking")
                setting.warp(threads,doorworldleveling)
                setting.wordsrandom()
                setting.webhookinfo()
            elseif findItem(idblockleveling+1) >= amountseed then
                setting.plant(threads,doorworldleveling,idblockleveling+1)
                goto BACK
            elseif findItem(112) > mingems and buypack then
                setting.buying(threads)
                setting.storingpacks(threads)
                setJob("Rechecking")
                setting.warp(threads,doorworldleveling)
                setting.wordsrandom()
                setting.webhookinfo()
            end
        end
    end
    for _, tile in pairs(getTiles()) do
        if tile.fg == 0 and getTile(tile.x,tile.y + 1).flags ~= 0 and findItem(idblockleveling+1) ~= 0 then
            findPath(tile.x,tile.y)
            sleep(delayplant)
            setting.reconnect(threads,doorworldleveling,tile.x,tile.y)
            if tile.fg ~= idblockleveling+1 then
                place(idblockleveling+1,0,0)
                sleep(delayplant)
                setting.reconnect(threads,doorworldleveling,tile.x,tile.y)
            end
        end
        if findItem(idblockleveling+1) == 0 then
            break
        end
    end
end

setting.plant = function(threads,static,seedid)
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    setJob("Planting")
    for y = -1, 53 do
        for x = tileA, tileB, tileC do
            if getTile(x,y).fg == 0 and getTile(x,y + 1).flags ~= 0 and findItem(seedid) ~= 0 then
                if findItem(seedid) == 0 then
                    break
                end
                findPath(x,y)
                sleep(delayplant)
                setting.reconnect(threads,static,x,y)
                if getTile(x,y).fg ~= seedid then
                    place(seedid,0,0)
                    sleep(delayplant)
                    setting.reconnect(threads,static,x,y)
                end
            end
        end
        if tileD == 1 then
            if tileA == 0 then
                tileA = 99
                tileB = 0
                tileC = -1
                tileD = 0
            elseif tileA == 99 then
                tileA = 0
                tileB = 99
                tileC = 1
                tileD = 0
            end
        elseif tileD == 0 then
            tileD = tileD + 1
        end
    end
end

setting.levelings = function(threads)
    tileA = 99
    tileB = 0
    tileC = -1
    tileD = 0
    setJob("Leveling")
    ::BACK::
    for y = -1, 53 do
        for x = tileA, tileB, tileC do
            if getTile(x,y).fg == idblockleveling+1 and getTile(x,y).ready then
                if getBot().level >= setminlvl then
                    break
                end
                if findItem(idblockleveling) > 180 then
                    if pnbother then
                        setting.rotate(threads,"",idblockleveling)
                        setJob("Leveling")
                        setting.warp(threads,doorworldleveling)
                        setting.wordsrandom()
                        setting.webhookinfo()
                        goto BACK
                    else
                        setting.rotate(threads,doorworldleveling,idblockleveling)
                        goto BACK
                    end
                end
                if findItem(idblockleveling+1) > amountseed then
                    setting.plant(threads,doorworldleveling,idblockleveling+1)
                    setJob("Leveling")
                    goto BACK
                elseif findItem(112) > mingems and buypack then
                    setting.buying(threads)
                    setting.storingpacks(threads)
                    setJob("Leveling")
                    setting.warp(threads,doorworldleveling)
                    setting.wordsrandom()
                    setting.webhookinfo()
                    goto BACK
                end
                findPath(x,y)
                setting.reconnect(threads,doorworldleveling,x,y)
                if getTile(x,y).fg == idblockleveling+1 then
                    punch(0,0)
                    sleep(delayharvest)
                    setting.reconnect(threads,doorworldleveling,x,y)
                end
                if ignoregems then
                    collect(range,112)
                else
                    collect(range)
                end
                sleep(30)
            end
        end
        if tileD == 1 then
            if tileA == 0 then
                tileA = 99
                tileB = 0
                tileC = -1
                tileD = 0
            elseif tileA == 99 then
                tileA = 0
                tileB = 99
                tileC = 1
                tileD = 0
            end
        elseif tileD == 0 then
            tileD = tileD + 1
        end
    end
end

setting.checkinglicense = function(content)
    local text = [[
        $host.ui.RawUI.WindowTitle = “”
        $deneme = "C:\Users\" + $env:UserName + "\AppData\Local\false.txt"
        $deneme2 = "C:\Users\" + $env:UserName + "\AppData\Local\true.txt"
        [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
        [System.Collections.ArrayList]$embedArray = @()
  
        $WebClient=New-Object net.webclient
        $gorkem = "]]..content..[["
        $raw = $WebClient.DownloadString("https://pastebin.com/raw/9pHmzMyW")
        If ($raw | %{$_ -match $gorkem}) 
        {
            If (Test-Path $deneme2) {
            Remove-Item $deneme2
            }
        New-Item $deneme2 -type file
        Add-Content -Path $deneme2 -Value "true"
        }
        else
        {
            If (Test-Path $deneme ) {
            Remove-Item $deneme
            }
            New-Item $deneme -type file
            Add-Content -Path $deneme -Value "false"
        }
    ]]
    pipe = io.popen("powershell -NoLogo -WindowStyle Hidden -ExecutionPolicy Bypass -command -", "w")
    pipe:write(text)
    pipe:close()
end

setting.checkk = function()
    if license ~= "" and not license:find("%s") then
        return true
    end
    return false
end

setting.infolic = function(name)
    local f = io.open(name,"r")
    if f ~= nil then 
        io.close(f) 
        return true 
    else
        return false 
    end
end

setting.checkinglicense(license:upper())
local username = os.getenv('USERNAME');
if setting.checkk() and setting.infolic("C:\\Users\\" .. username .. "\\AppData\\Local\\true.txt") then
    os.remove("C:\\Users\\" .. username .. "\\AppData\\Local\\true.txt")
    print("License are valid, running script")
elseif license == "" or license:find("%s") or setting.infolic("C:\\Users\\" .. username .. "\\AppData\\Local\\false.txt") then
    os.remove("C:\\Users\\" .. username .. "\\AppData\\Local\\false.txt")
    print("Input ur valid license")
    error()
end
if findItem(9640) > 0 then
    ::SUCK::
    setting.warp(getBot().name,"")
    setting.wordsrandom()
    while getTile(math.floor(getBot().x / 32),math.floor(getBot().y / 32) - 1).fg ~= 9640 do
        place(9640,0,-1)
        sleep(delayplace)
    end
    if findItem(9640) > 0 then
        goto SUCK
    end
end
::Check::
if findItem(98) == 0 and pickaxe and getBot().status == "online" then
    setting.takepickaxe()
    goto Check
end
if leveling then
    if getBot().level < 5 then
        setting.warp(find,"")
        setting.wordsrandom()
        setting.indexdirt()
    end
    for idx, annount in pairs(worldleveling) do
        ::BACK::
        setting.storageinfo()
        setting.warp(annount,doorworldleveling)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if not fire then
                            setting.levelings(annount)
                            setting.levelingcek(annount)
                        else
                            fire = false
                            sleep(5000)
                            print(""..annount.." has burn")
                            setting.botinfo("[ "..annount.." ] has burn, skipped world @everyone")
                        end
                    else
                        wrong = false
                        sleep(5000)
                        print(""..annount.." is wrong door id, skipped world")
                        setting.botinfo("[ "..annount.." ] is wrong door id, skipped world @everyone")
                    end
                else
                    nuked = false
                    sleep(5000)
                    print(""..value.." is NUKED!, check ur world !!")
                    setting.botinfo("[ "..annount.." ] is NUKED!, check ur world !! @everyone")
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end 
    end
end
while true do
    for _, value in ipairs(worlds) do
        ::BACK::
        setting.storageinfo()
        setting.warp(value,doorfarm)
        setting.wordsrandom()
        setting.webhookinfo()
        if not failwarp then
            if not subserver then
                if not nuked then
                    if not wrong then
                        if not fire then
                            setting.harvest(value)
                            setting.rechecking(value)
                        else
                            fire = false
                            sleep(5000)
                            setting.writeFile("worldinfo","[ "..value.." ] has burn")
                            sleep(1000)
                            print(""..value.." has burn")
                            setting.botinfo("[ "..value.." ] has burn, skipped world @everyone")
                        end
                    else
                        wrong = false
                        sleep(5000)
                        setting.writeFile("worldinfo","[ "..value.." ] is wrong id")
                        sleep(1000)
                        print(""..value.." is wrong door id, skipped world")
                        setting.botinfo("[ "..value.." ] is wrong door id, skipped world @everyone")
                    end
                else
                    nuked = false
                    sleep(5000)
                    setting.writeFile("worldinfo","[ "..value.." ] is NUKED !!")
                    sleep(1000)
                    print(""..value.." is NUKED!, check ur world !!")
                    setting.botinfo("[ "..value.." ] is NUKED!, check ur world !! @everyone")
                end
            else
                subserver = false
                sleep(5000)
                print("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes")
                setting.botinfo("Bot : "..getBot().name.." system is sub-server, sleeping for 2 minutes @everyone")
                sleep(120000)
                goto BACK
            end
        else
            failwarp = false
            sleep(5000)
            print("Fail warp, sleeping for 2 minutes")
            setting.botinfo("Fail warp, sleeping for 2 minutes")
            sleep(120000)
            goto BACK
        end 
    end
    if not looping then
        if findItem(seed) > 0 then
            setting.storingseeds(threads)
        end
        setJob("Already finished all world")
        print("[ "..getBot().name.." ] Already finished all world, Terminated script!")
        setting.botinfo("[ "..getBot().name.." ] Already finished all world, Terminated script! @everyone")
        setJob("Finished all world")
        setting.warp(find,"")
        setting.wordsrandom()
        if removingbot then
            removeBot(getBot().name)
            sleep(1500)
        end 
        break
    end
end
